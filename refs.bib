@BOOK{Lamport86,
TITLE = "{LaTeX} --- a document preparation system --- user's guide
and reference manual",
AUTHOR = "Lamport, L.",
PUBLISHER = "Addison-Wesley",
YEAR = "1986"}

@REPORT{Moore95,
TITLE = "How to prepare a dissertation in LaTeX",
AUTHOR = "Moore, S.W.",
YEAR = "1995"}

@article{goodman_semiring_1999,
	title = {Semiring {Parsing}},
	volume = {25},
	url = {https://aclanthology.org/J99-4004},
	number = {4},
	urldate = {2022-08-01},
	journal = {Computational Linguistics},
	author = {Goodman, Joshua},
	year = {1999},
	note = {Place: Cambridge, MA
Publisher: MIT Press},
	pages = {573--606},
	file = {Full Text PDF:/Users/judah/Zotero/storage/VIIER4EP/Goodman - 1999 - Semiring Parsing.pdf:application/pdf},
}

@article{finkensiep_modeling_2021,
	title = {{MODELING} {AND} {INFERRING} {PROTO}-{VOICE} {STRUCTURE} {IN} {FREE} {POLYPHONY}},
	abstract = {Voice leading is considered to play an important role in the structure of Western tonal music. However, the explicit voice assignment of a piece (if present at all) generally does not reﬂect all phenomena related to voice leading. Instead, voice-leading phenomena can occur in free textures (e.g., in most keyboard music), or cut across the explicitly notated voices (e.g., through implicit polyphony within a single voice). This paper presents a model of proto-voices, voice-like structures that encode sequential and vertical relations between notes without the need to assume explicit voices. Proto-voices are constructed by recursive combination of primitive structural operations, such as insertion of neighbor or passing notes, or horizontalization of simultaneous notes. Together, these operations give rise to a grammar-like hierarchical system that can be used to infer the structural fabric of a piece using a chart parsing algorithm. Such a model can serve as a foundation for deﬁning higher-level latent entities (such as harmonies or voice-leading schemata), explicitly linking them to their realizations on the musical surface.},
	language = {en},
	author = {Finkensiep, Christoph and Rohrmeier, Martin},
	year = {2021},
	file = {Finkensiep and Rohrmeier - 2021 - MODELING AND INFERRING PROTO-VOICE STRUCTURE IN FR.pdf:/Users/judah/Zotero/storage/RQYKS2LS/Finkensiep and Rohrmeier - 2021 - MODELING AND INFERRING PROTO-VOICE STRUCTURE IN FR.pdf:application/pdf},
}

@book{lerdahl_generative_2010,
	address = {Cambridge, Mass.},
	edition = {Repr.},
	title = {A generative theory of tonal music},
	isbn = {978-0-262-62107-6},
	language = {eng},
	publisher = {MIT Press},
	author = {Lerdahl, Fred and Jackendoff, Ray},
	year = {2010},
	file = {Lerdahl and Jackendoff - 2010 - A generative theory of tonal music.pdf:/Users/judah/Zotero/storage/YX5TQ8JQ/Lerdahl and Jackendoff - 2010 - A generative theory of tonal music.pdf:application/pdf},
}

@misc{johannes_ms3_2021,
	title = {ms3 - {Parsing} {MuseScore} 3},
	shorttitle = {Ms3},
	url = {https://github.com/johentsch/ms3},
	abstract = {A parser for annotated MuseScore 3 files.},
	author = {Johannes, Hentschel},
	year = {2021},
}

@article{neuwirth_annotated_2018,
	title = {The {Annotated} {Beethoven} {Corpus} ({ABC}): {A} {Dataset} of {Harmonic} {Analyses} of {All} {Beethoven} {String} {Quartets}},
	volume = {5},
	issn = {2297-2668},
	shorttitle = {The {Annotated} {Beethoven} {Corpus} ({ABC})},
	url = {https://www.frontiersin.org/article/10.3389/fdigh.2018.00016/full},
	doi = {10.3389/fdigh.2018.00016},
	abstract = {STATISTICS The ABC contains expert harmonic annotations of all sixteen string quartets (70 movements) by Beethoven: quartets nos. 1–6 (op. 18), nos. 7–9 (op. 59), no. 10 (op. 74), no. 11 (op. 95), no. 12 (op. 127) (four movements each quartet), no. 13 (op. 130; six movements), no. 14 (op. 131; seven movements), no. 15 (op. 132; ﬁve movements), and no. 16 (op. 135; four movements). In total, the ABC consists of 15,806 measures (240,462 notes) of music, which were annotated with 27,962 chord labels (1,753 unique). Table 1 describes our dataset in comparison to other corpora of symbolic harmonic labels with respect to style, structural features, and size (number of items, measures, and chord symbols) in the ﬁrst six rows. The last three rows give more detailed information about the distribution of chord symbols in our string quartet corpus.},
	language = {en},
	urldate = {2022-10-11},
	journal = {Frontiers in Digital Humanities},
	author = {Neuwirth, Markus and Harasim, Daniel and Moss, Fabian C. and Rohrmeier, Martin},
	month = jul,
	year = {2018},
	pages = {16},
	file = {Neuwirth et al. - 2018 - The Annotated Beethoven Corpus (ABC) A Dataset of.pdf:/Users/judah/Zotero/storage/CGR7ITXM/Neuwirth et al. - 2018 - The Annotated Beethoven Corpus (ABC) A Dataset of.pdf:application/pdf},
}

@phdthesis{finkensiep_structure_2022,
	type = {{PhD} thesis},
	title = {The {Structure} of {Free} {Polyphony}},
	author = {Finkensiep, Christoph},
	year = {2022},
}

@article{marsden_schenkerian_2010,
	title = {Schenkerian {Analysis} by {Computer}: {A} {Proof} of {Concept}},
	volume = {39},
	issn = {0929-8215, 1744-5027},
	shorttitle = {Schenkerian {Analysis} by {Computer}},
	url = {http://www.tandfonline.com/doi/abs/10.1080/09298215.2010.503898},
	doi = {10.1080/09298215.2010.503898},
	abstract = {A system for automatically deriving a Schenkerian reduction of an extract of tonal music is described. Schenkerian theory is formalized in a quasi-grammatical manner, expressing a reduction as a binary-tree structure. Computer software which operates in the manner of a chart parser using this grammar has been implemented, capable of deriving a matrix of reduction possibilities, in polynomial time, from a representation of the score. A full reduction of the extract can be discovered by selecting a tree from this matrix. The number of possible valid reductions for even short extracts is found to be extremely large, so criteria are required to distinguish good reductions from bad ones. To ﬁnd such criteria, themes from ﬁve Mozart piano sonatas are analysed and samples of ‘good’ reductions (deﬁned by reference to preexisting analyses of these themes) are compared with randomly sampled reductions. Nine criteria are thereby derived, which can be applied in the process of parsing and selecting a reduction. The results are promising, but the process is still too computationally expensive—only extracts of a few bars in length can be reduced—and more extensive testing is required before the system can be properly claimed to perform automatic Schenkerian analysis.},
	language = {en},
	number = {3},
	urldate = {2022-11-14},
	journal = {Journal of New Music Research},
	author = {Marsden, Alan},
	month = sep,
	year = {2010},
	pages = {269--289},
	file = {Marsden - 2010 - Schenkerian Analysis by Computer A Proof of Conce.pdf:/Users/judah/Zotero/storage/2CJAF2LK/Marsden - 2010 - Schenkerian Analysis by Computer A Proof of Conce.pdf:application/pdf},
}

@article{kidney_algebras_2021,
	title = {Algebras for weighted search},
	volume = {5},
	issn = {2475-1421},
	url = {https://dl.acm.org/doi/10.1145/3473577},
	doi = {10.1145/3473577},
	abstract = {DONNACHA OISÍN KIDNEY, Imperial College London, United Kingdom NICOLAS WU, Imperial College London, United Kingdom Weighted search is an essential component of many fundamental and useful algorithms. Despite this, it is relatively under explored as a computational effect, receiving not nearly as much attention as either depth- or breadth-first search. This paper explores the algebraic underpinning of weighted search, and demonstrates how to implement it as a monad transformer. The development first explores breadth-first search, which can be expressed as a polynomial over semirings. These polynomials are generalised to the free semimodule monad to capture a wide range of applications, including probability monads, polynomial monads, and monads for weighted search. Finally, a monad transformer based on the free semimodule monad is introduced. Applying optimisations to this type yields an implementation of pairing heaps, which is then used to implement Dijkstra’s algorithm and efficient probabilistic sampling. The construction is formalised in Cubical Agda and implemented in Haskell. CCS Concepts: • Theory of computation → Shortest paths; Backtracking; Proof theory; Constructive mathematics; Type theory; Logic and verification; Algebraic semantics; • Software and its engineering → Functional languages; Data types and structures.},
	language = {en},
	number = {ICFP},
	urldate = {2022-11-27},
	journal = {Proceedings of the ACM on Programming Languages},
	author = {Kidney, Donnacha Oisín and Wu, Nicolas},
	month = aug,
	year = {2021},
	pages = {1--30},
	file = {Kidney and Wu - 2021 - Algebras for weighted search.pdf:/Users/judah/Zotero/storage/PNPGP9YX/Kidney and Wu - 2021 - Algebras for weighted search.pdf:application/pdf},
}

@book{russell_artificial_2010,
	address = {Upper Saddle River},
	edition = {3rd ed},
	series = {Prentice {Hall} series in artificial intelligence},
	title = {Artificial intelligence: a modern approach},
	isbn = {978-0-13-604259-4},
	shorttitle = {Artificial intelligence},
	language = {en},
	publisher = {Prentice Hall},
	author = {Russell, Stuart J. and Norvig, Peter and Davis, Ernest},
	year = {2010},
	keywords = {Artificial intelligence},
	file = {Russell et al. - 2010 - Artificial intelligence a modern approach.pdf:/Users/judah/Zotero/storage/38YISIQK/Russell et al. - 2010 - Artificial intelligence a modern approach.pdf:application/pdf},
}
